#set( $_= "$" )
##--------------------------------------------------------------------------------------------------------
'use strict';

var uncapitalize = function(s) {
	return s.substring(0,1).toLowerCase() + s.substring(1);
}

var capitalize = function(s) {
	return s.substring(0,1).toUpperCase() + s.substring(1);
}

var plural = function(name) {
	if(name == null || name == "") {
		return name;
	}
	return uncapitalize(pluralize(name));
}

var decimalAdjust = function(type, value, exp) {
	// Si la valeur de exp n'est pas définie ou vaut zéro...
	if (typeof exp === 'undefined' || +exp === 0) {
		return Math[type](value);
	}
	value = +value;
	exp = +exp;
	// Si la valeur n'est pas un nombre 
	// ou si exp n'est pas un entier...
	if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
		return NaN;
	}
	// Décalage
	value = value.toString().split('e');
	value = Math[type]
			(+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
	// Décalage inversé
	value = value.toString().split('e');
	return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
};

var floor10 = function(value, exp) {
	return decimalAdjust('floor', value, exp);
};

var getParameterByName = function(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\${_}&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|${_})"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}

// Declare app level module which depends on filters, and services
var myApp = angular.module('myApp', [
   'ngRoute'
  ,'ngResource' 
  ,'myApp.services'
  ,'messageHandler.module'
  ,'errorCatcher.module'
  ,'exceptionCatcher.module'
#foreach($entity in ${entities})
  ,'${entity.uncapitName}.module'
#end
]);

myApp.run(function(${_}rootScope) {
    ${_}rootScope.modifiedItems = [];
});

myApp.run(function (${_}rootScope, ${_}location, ${_}window) {

	var history = [];
    
    ${_}rootScope.${_}on('${_}routeChangeSuccess', function() {
		console.log("---->"+${_}location.${_}${_}path);
        history.push(${_}location.${_}${_}path);		
    });

    ${_}rootScope.goBack = function () {
        var prevUrl = history.length >= 1 ? history.splice(-2)[0] : "/";
		console.log("Going back to "+prevUrl);
        ${_}location.path(prevUrl);
    };

});

myApp.factory('MyHttpInterceptor', function(${_}q, ${_}location, ${_}window) {
return {
    request : function(config) {
			
        config.params = config.params || {};

        if (${_}window.localStorage.authToken) {
            config.params.authToken = ${_}window.localStorage.authToken;
        }
        return config || ${_}q.when(config);
    }
  };
});

/**
 * Main configuration
 */
myApp.config(['${_}routeProvider', '${_}httpProvider', function(${_}routeProvider, ${_}httpProvider) {
  ${_}routeProvider.when('/', {templateUrl: '${adminPrefix}/partials/welcome.html'});
  ${_}routeProvider.otherwise({redirectTo: '/'});
  ${_}httpProvider.interceptors.push('MyHttpInterceptor');
}]);


myApp.controller('MainCtrl', ['${_}scope',
	function(${_}scope) {
	
		${_}scope.initialise = function() {}
		
	}]);

