#set( $_= "$" )
##--------------------------------------------------------------------------------------------------------
'use strict';

/* Services */

var myAppServices = angular.module('myApp.services', ['ngResource']);

// Demonstrate how to register services
// In this case it is a simple value service.
myAppServices.value('version', '0.1');

// Base URL for REST Services on the Spring MVC webapp
var springRestApiUrl = "${restUrl}";
if(!springRestApiUrl.endsWith("/"))
	springRestApiUrl = springRestApiUrl + "/";

myAppServices.value('restURL', springRestApiUrl);

myAppServices.factory('CommonServices', ['${_}http', 'restURL',  
                                         function(${_}http, restURL) {	

	function _getEntityUrl(endPointName) {
		return restURL + endPointName;
	}
	
	function _getId(href) {
		return href.substring(href.lastIndexOf("/") + 1);
	}
	
	function _getHRef(item) {
		return item._links.self.href;
	}
	
	function _getItemId(item) {
		var href = _getHRef(item);
		return _getId(href);
	}

	function _getEntityName(url) {
		var name = url.substring(0, url.lastIndexOf("/"));
		name = name.substring(name.lastIndexOf("/") + 1);
		name = name.substring(0, name.length - 1);
		return capitalize(name);
	}
	
	return {
		
		getId:function getId(href) {
			return _getId(href);
		},

		getHRef:function getHRef(item) {
			return _getHRef(item);
		},
		
		getItemId:function getItemId(item) {
			return _getItemId(item);
		},
		
		getEntityUrl:function(endPointName) {
			return _getEntityUrl(endPointName);
		},
		
		getCreationFormUrl:function(adminUrl) {
			return adminUrl + "/new";
		},
		
		getUpdateFormUrl:function(adminUrl, item) {
			var id = _getItemId(item);
			return adminUrl + "/" + id;
		},
		
        
        /**
		 * Get all items
		 * 
		 * @return all items
		 */
    	getAll: function(endPointName, entityName) {
        	return ${_}http.get(_getEntityUrl(endPointName), { params: { projection : entityName + 'Excerpt'}});
    	},

		getDescription: function(url) {
			
        	return ${_}http.get(url, { params: { projection : _getEntityName(url) + 'Excerpt' }});
    	},

        /**
		 * Get item
		 * 
		 * @param id
		 *            id
		 * @return item
		 */
    	get: function(endPointName, entityName, id) {
    	    var url = _getEntityUrl(endPointName) + '/' + id+'?projection=' + entityName + 'Excerpt';
        	return ${_}http.get(url);
    	},

        /**
		 * Create a new item
		 * 
		 * @param item
		 *            item
		 * @return item saved
		 */
		create: function(endPointName, item) {
			return ${_}http.post(_getEntityUrl(endPointName), item);
    	},

        /**
		 * Update item
		 * 
		 * @param item
		 *            item
		 * @return item saved
		 */
    	update: function(endPointName, item) {
			var url = _getEntityUrl(endPointName) + '/' + _getItemId(item);
			return ${_}http.patch(url, item);
    	},

		/**
		 * Delete item
		 * 
		 * @param id
		 *            id
		 */
    	deleteItem: function(endPointName, id) {
        	var url = _getEntityUrl(endPointName) + '/' + id;
			return ${_}http.delete(url);
    	}

	};
	return ${_}this;
}]);

myAppServices.factory('Item', [
                           		'${_}http',
                           		'restURL',
function(${_}http, restURL) {

	function Item(item) {
		return item;
	}

	Item.query = function(endpoint, entityName, page, sort, callback) {
		var url = restURL + endpoint + "/?projection=" + entityName + "Excerpt";
		var params = { params: { projection : entityName + 'Excerpt'}}
		if(page != null)
			params = { params: { projection: entityName + 'Excerpt', page: page}};
		return ${_}http.get(url, params).then(
				function(data) {
					Item.page = data.data.page;
					callback(data.data._embedded[plural(entityName)]);
				});
	};

	return Item;

} ]);

